--- a/fs/overlayfs/inode.c
+++ b/fs/overlayfs/inode.c
@@ -45,7 +45,7 @@ static int ovl_getattr(struct vfsmount *
 	return vfs_getattr(realpath.mnt, realpath.dentry, stat);
 }

-int ovl_permission(struct inode *inode, int mask)
+int ovl_permission(struct inode *inode, int mask, unsigned int flags)
 {
 	struct ovl_entry *oe;
 	struct dentry *alias = NULL;
@@ -56,7 +56,7 @@ int ovl_permission(struct inode *inode,

 	if (S_ISDIR(inode->i_mode)) {
 		oe = inode->i_private;
-	} else if (mask & MAY_NOT_BLOCK) {
+	} else if (flags & IPERM_FLAG_RCU) {
 		return -ECHILD;
 	} else {
 		/*
@@ -79,7 +79,7 @@ int ovl_permission(struct inode *inode,
 	/* Careful in RCU walk mode */
 	realinode = ACCESS_ONCE(realdentry->d_inode);
 	if (!realinode) {
-		WARN_ON(!(mask & MAY_NOT_BLOCK));
+		WARN_ON(!(flags & IPERM_FLAG_RCU));
 		err = -ENOENT;
 		goto out_dput;
 	}
@@ -105,9 +105,10 @@ int ovl_permission(struct inode *inode,
 	}

 	if (realinode->i_op->permission)
-		err = realinode->i_op->permission(realinode, mask);
+		err = realinode->i_op->permission(realinode, mask, flags);
 	else
-		err = generic_permission(realinode, mask);
+		err = generic_permission(realinode, mask, flags,
+					 realinode->i_op->check_acl);
 out_dput:
 	dput(alias);
 	return err;
--- a/fs/overlayfs/overlayfs.h
+++ b/fs/overlayfs/overlayfs.h
@@ -44,7 +44,7 @@ int ovl_check_empty_and_clear(struct den

 /* inode.c */
 int ovl_setattr(struct dentry *dentry, struct iattr *attr);
-int ovl_permission(struct inode *inode, int mask);
+int ovl_permission(struct inode *inode, int mask, unsigned int flags);
 int ovl_setxattr(struct dentry *dentry, const char *name,
 		 const void *value, size_t size, int flags);
 ssize_t ovl_getxattr(struct dentry *dentry, const char *name,
